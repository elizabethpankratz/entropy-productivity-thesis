# -*- coding: utf-8 -*-
# Reads in the queries from bases_manual_query.csv and gets counts for the bases that weren't generated by Backformer in script 2.

from SeaCOW import Query, Nonprocessor, ConcordanceLoader
import pandas as pd

CORPUS      = 'decow16a-nano'
DF          = pd.read_csv('bases_manual_query.csv')
QUERIES     = DF['cql']


# ======================================================


def get_count(cql, corpus):
  """
  Counts the number of tokens for the given query in the given corpus. Returns number of hits (i.e., tokens).
  """
  
  # Create a Query object and set whatever needs to be set.
  q = Query()
  q.corpus          = corpus                # Lower-case name of the corpusto use.
  q.string          = cql                     # A normal CQL string as used in NoSketchEngine.
  q.max_hits        = -1
  q.attributes      = []                      # For counting, you don't need word attributes.
  q.structures      = []                      # ... you don't need structural attributes.
  q.references      = []                      # ... you don't need reference attrs.
  q.container       = 's'                       # Which container structure should be used? None is OK
                                              # only if class is Nonprocessor.
  
  # Using the deduplicator would NOT change the outcome. Switch off.
  q.set_deduplication(off = True)
  
  # Create a Processor object and attach it to the Query object.
  # The Nonprocessor processor does nothing. You can work with the results
  # yourself in the finalise method or just get the hits value from the
  # query object. It is the concordance as seported by Manatee.
  p                 = Nonprocessor()  # Create a processor object of appropriate type.
  q.processor       = p               # Attach the processor to the query.
  q.run()                             # Run the query.
  return q.hits
  

# ======================================================

# Run each query in QUERIES in CORPUS, replace base_freq column in DF, and save result as csv.
DF['base_freq'] = [get_count(q, CORPUS) for q in QUERIES]
DF.to_csv('bases_manual_query_done.csv', index=False, encoding='UTF-8')

print 'Done'
